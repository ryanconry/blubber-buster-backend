{"version":3,"sources":["components/FormComponent.tsx","components/BBRow.tsx","components/ResultRow.tsx","constants/index.tsx","components/Results.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["buttonStyling","margin","FormComponent","exerciseTypes","exerciseState","setExerciseState","submitRequest","areResultsShown","isExerciseStateEmtpy","handleChange","event","target","id","checked","Form","className","style","map","type","Check","inline","label","onChange","Button","variant","onClick","disabled","BBRow","children","Row","Col","xs","_","require","ResultRow","exercise","data","name","startCase","movement","sets","reps","queryStrings","Chest","Legs","Back","Arms","Shoulders","responseToExerciseMap","chestExercise","legExercise","backExercise","armExercise","shoulderExercise","Results","queryString","exercisesToQuery","join","GET_EXERCISES","gql","useQuery","value","key","App","useState","showResults","setShowResults","initialState","forEach","filter","length","Container","marginTop","display","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","cache","InMemoryCache","uri","defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd58737b.chunk.js","sourcesContent":["import React from 'react';\nimport { Form, Button } from 'react-bootstrap';\n\nimport { FormProps } from '../interfaces';\n\nconst buttonStyling = {\n  margin: \"12px\"\n};\n\nexport const FormComponent: React.FC<FormProps> = ({ exerciseTypes, exerciseState, setExerciseState, submitRequest, areResultsShown, isExerciseStateEmtpy }) => {\n  // Change the state for the triggered input while maintaining other input state\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setExerciseState({\n      ...exerciseState,\n      [event.target.id]: event.target.checked\n    });\n  }\n\n  return (\n    <>\n      <h4>What body parts would you like to exercise?</h4>\n      <Form>\n        <div className=\"options-container\" style={{ margin: \"20px 0\" }}>\n          {exerciseTypes.map((type) => <Form.Check inline type=\"checkbox\" checked={exerciseState[type]} key={type} id={type} label={type} onChange={handleChange} />)}\n        </div>\n        {areResultsShown ? (\n          <Button style={buttonStyling} variant=\"primary\" onClick={() => submitRequest(false)}>\n          Clear Results\n        </Button>\n        ) : (\n          <Button style={buttonStyling} variant=\"primary\" disabled={isExerciseStateEmtpy} onClick={() => submitRequest(true)}>\n          Get Workout!\n        </Button>\n        )}\n      </Form>\n    </>\n  )\n}","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { RowProps } from '../interfaces'\n\nexport const BBRow: React.FC<RowProps> = ({ children }) => {\n  return (\n    <Row style={{ margin: \"24px 0\" }}>\n      <Col></Col>\n      <Col xs={6}>\n        {children}\n      </Col>\n      <Col></Col>\n    </Row>\n  )\n}","import React from 'react';\n\nimport { ResultRowProps } from '../interfaces'\n\nconst _ = require('lodash');\n\nexport const ResultRow: React.FC<ResultRowProps> = ({ exercise, data }) => {\n  return (\n    <div className=\"result-row\" style={{margin: \"24px 0\"}}>\n      <h5>{exercise}</h5>\n      <div>Name: {data.name}</div>\n      <div>Type: {_.startCase(data.type)}</div>\n      <div>Movement: {_.startCase(data.movement)}</div>\n      <div>Sets: {data.sets}</div>\n      <div>Reps: {data.reps}</div>\n    </div>\n  );\n}","export const queryStrings: { [key: string]: string } = {\n    Chest: `chestExercise {\n      name,\n      type,\n      movement,\n      sets,\n      reps\n    }`,\n    Legs: `legExercise {\n      name,\n      type,\n      movement,\n      sets,\n      reps\n    }`,\n    Back: `backExercise {\n      name,\n      type,\n      movement,\n      sets,\n      reps\n    }`,\n    Arms: `armExercise {\n      name,\n      type,\n      movement,\n      sets,\n      reps\n    }`,\n    Shoulders: `shoulderExercise {\n      name,\n      type,\n      movement,\n      sets,\n      reps\n    }`\n  }\n\n  export const responseToExerciseMap: { [key: string]: string } = {\n    chestExercise: 'Chest',\n    legExercise: 'Legs',\n    backExercise: 'Back',\n    armExercise: 'Arms',\n    shoulderExercise: 'Shoulders'\n  }\n\n  export const exerciseTypes: string[] = ['Chest', 'Legs', 'Back', 'Arms', 'Shoulders'];\n\n","import React from 'react';\nimport { gql, useQuery } from '@apollo/client';\n\nimport { ResultRow } from './ResultRow' \nimport { queryStrings, responseToExerciseMap } from '../constants';\nimport { ExerciseResponseAttributes, ResultsProps } from '../interfaces'\n\nconst _ = require('lodash');\n\nexport const Results: React.FC<ResultsProps> = ({ exercisesToQuery }) => {\n  const queryStringArray: string[] = exercisesToQuery.map((exercise) => queryStrings[exercise])\n  const queryString: string = queryStringArray.join('\\n')\n\n  const GET_EXERCISES = gql`\n  query Query {\n    ${queryString}\n  }\n  `;\n\n  const {\n    data\n  } = useQuery(GET_EXERCISES);\n\n  return (\n    <div className=\"results-container\" style={{margin: \"36px 0\"}}>\n    {_.map(data, (value: ExerciseResponseAttributes , key: string) => (\n      <ResultRow key={key} exercise={responseToExerciseMap[key]} data={value} />\n    ))}\n    </div>\n    )\n}","import React, { useState } from 'react';\nimport { Container } from 'react-bootstrap'\n\nimport { FormComponent } from './components/FormComponent';\nimport { BBRow } from './components/BBRow';\nimport { Results } from './components/Results';\nimport { exerciseAttribute } from './interfaces';\nimport { exerciseTypes} from './constants';\n\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [showResults, setShowResults] = useState(false);\n  // Initialize state for all exercise types as true\n  const [exerciseState, setExerciseState] = useState(() => {\n    const initialState: exerciseAttribute = {};\n    exerciseTypes.forEach(type => initialState[type] = true)\n    return initialState;\n  });\n\n  const exercisesToQuery = exerciseTypes.filter((type) => exerciseState[type]);\n  const isExerciseStateEmtpy = exercisesToQuery.length === 0;\n\n  return (\n    <Container>\n      <div className=\"App\" style={{ marginTop: \"16px\" }}>\n        <h1 style={{ display: \"block\", margin: \"auto\" }}>Blubber Buster</h1>\n        <BBRow>\n          <FormComponent\n            exerciseTypes={exerciseTypes}\n            exerciseState={exerciseState}\n            setExerciseState={setExerciseState}\n            submitRequest={setShowResults}\n            areResultsShown={showResults}\n            isExerciseStateEmtpy={isExerciseStateEmtpy}\n          />\n        </BBRow>\n        {showResults && !isExerciseStateEmtpy && (\n          <BBRow>\n            <h4>Here is your custom exercise!</h4>\n            <p>Toggle the checkboxes to request different exercises.</p>\n            <Results exercisesToQuery={exercisesToQuery} />\n          </BBRow>\n        )\n        }\n      </div>\n    </Container>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  ApolloClient,\n  NormalizedCacheObject,\n  ApolloProvider,\n  InMemoryCache,\n  DefaultOptions \n} from '@apollo/client';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Remove caching fetches so that different exercises can be retrieved\n// https://www.apollographql.com/docs/react/api/core/ApolloClient/#example-defaultoptions-object\nconst defaultOptions: DefaultOptions  = {\n  watchQuery: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'ignore',\n  },\n  query: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all',\n  },\n}\n\n// Initialize ApolloClient\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache: new InMemoryCache(),\n  // For development\n  // uri: 'http://localhost:4000/graphql',\n  uri: '/graphql',\n  defaultOptions\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}